#!/usr/bin/env node

const babelrc                      = require('../babelrc.json')
const parse                        = require('minimist')
const { resolve }                  = require('path')
const { readFileSync, existsSync } = require('fs')

const projectDir = resolve('./')

require('babel-register')({
  presets: babelrc.presets,
  plugins: babelrc.plugins,
  auxiliaryCommentBefore: babelrc.auxiliaryCommentBefore,
  env: babelrc.env
})

const args = parse(process.argv, {
  alias: {
    H: 'host',
    h: 'help',
    p: 'port',
    w: 'watch',
    f: 'fake-only'
  },
  boolean: ['h', 'w', 'f'],
  default: {
    H: '0.0.0.0',
    p: 3000
  }
})

let [,, func = 'run'] = args._

const help = () => {
  console.log( // eslint-disable-line no-console
  `
  Usage: micropack (run|build|init) [options]

  -h, --help - Show this help message

  run - start the server, default command

  [options]
    -H, --host - Host to listen on [0.0.0.0]
    -p, --port - Port to listen on [3000]

  build - compile files to [dist]

  [options]
    -w, --watch - recompile files on save

  init - create a new project

  [options]
    -f, --framework - choose a framework [vuejs]
    -t, --template  - template [github|url]

  karma - run tests using karma, mocha and chai

  [options]
    --help      - to see all karma options
    -m, --micro - run the micro fake server
  `)
}

switch (func) {
  case 'karma':
    process.env.NODE_ENV = process.env.NODE_ENV || 'test'
    break
  case 'build':
    process.env.NODE_ENV = process.env.NODE_ENV || 'production'
    break
  default:
    process.env.NODE_ENV = process.env.NODE_ENV || 'development'
    break
}

const dotenv  = require('dotenv')
const envFile = resolve(`${projectDir}/.env.${process.env.NODE_ENV}`)

dotenv.config({ path: `${projectDir}/.env` })

if (existsSync(envFile)) {
  const envConfig = dotenv.parse(readFileSync(envFile))

  for (var k in envConfig) {
    process.env[k] = envConfig[k]
  }
}

console.log(process.env.ACD_API_URL)

const micropack = require('../lib/index')(args)

switch (func) {
  case 'run':
    micropack.run()
    break
  case 'build':
    micropack.build()
    break
  case 'karma':
    micropack.karma()
    break
  default:
    if (args.help) {
      help()
      process.exit(0)
    }
    break
}
