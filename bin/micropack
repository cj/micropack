#!/usr/bin/env node

const babelrc     = require('../babelrc.json')
const parse       = require('minimist')
const serve       = require('micro')
const { resolve } = require('path')
const projectDir  = resolve('./')

require('babel-register')({
  presets: babelrc.presets,
  plugins: babelrc.plugins,
  auxiliaryCommentBefore: babelrc.auxiliaryCommentBefore,
  env: babelrc.env
})

const args = parse(process.argv, {
  alias: {
    H: 'host',
    h: 'help',
    p: 'port',
    w: 'watch',
    f: 'fake-only'
  },
  boolean: ['h', 'w', 'f'],
  default: {
    H: '0.0.0.0',
    p: 3000
  }
})

let [,, func = 'run'] = args._

const help = () => {
  console.log( // eslint-disable-line no-console
  `
  Usage: micropack (run|build|init) [options]

  -h, --help - Show this help message

  run - start the server, default command

  [options]
    -H, --host - Host to listen on [0.0.0.0]
    -p, --port - Port to listen on [3000]

  build - compile files to [dist]

  [options]
    -w, --watch - recompile files on save

  init - create a new project

  [options]
    -f, --framework - choose a framework [vuejs]
    -t, --template  - template [github|url]

  karma - run tests using karma, mocha and chai

  [options]
    --help      - to see all karma options
    -m, --micro - run the micro fake server
  `)
}

switch (func) {
  case 'karma':
    process.env.NODE_ENV = process.env.NODE_ENV || 'test'
    break
  default:
    process.env.NODE_ENV = process.env.NODE_ENV || 'development'
    break
}

require('dotenv').config({ path: `${projectDir}/.env` })
require('dotenv').config({ path: `${projectDir}/.env.${process.env.NODE_ENV}` })

const run = () => {
  const micro          = require('../lib/index')
  const { port, host } = args

  serve(micro(args)).listen(port, host, err => {
    if (err) {
      console.error('micro:', err.stack) // eslint-disable-line no-console
      process.exit(1)
    }
    console.log(`> Ready! Listening on http://${host}:${port}`) // eslint-disable-line no-console
  })
}

switch (func) {
  case 'run':
    run()
    break
  case 'karma':
    delete process.argv.splice(2, 1)
    const cli            = require('karma/lib/cli')

    if (process.argv.includes('start') && !args.help) {
      const _template                         = require('lodash/template')
      const { tmpDir, srcDir,  microPackDir } = require('../lib/config')()
      const entryFile                         = `${tmpDir}/karma.entry.js`

      // make sure we use the micropack karma config
      process.argv.splice(3, 0, `${microPackDir}/karma/config.js`)

      const { existsSync, mkdirSync, writeFileSync, readFileSync } = require('fs')

      if (!existsSync(tmpDir)) {
        mkdirSync(tmpDir)
      }

      const entryTemplate     = readFileSync(`${microPackDir}/karma/entry.template.js`, 'utf8')
      const entryFileCompiled = _template(entryTemplate, { interpolate: /{{([\s\S]+?)}}/g })({
        srcDir
      })

      writeFileSync(entryFile, entryFileCompiled, 'utf8')
    }

    if (args.micro) { run() }
    cli.run()
    break
  default:
    if (args.help) {
      help()
      process.exit(0)
    }
    break
}
